# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import common.proto.test_task_pb2 as test__task__pb2


class ConverterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConvertAndSave = channel.unary_unary(
                '/task.Converter/ConvertAndSave',
                request_serializer=test__task__pb2.ConvertAndSaveRequest.SerializeToString,
                response_deserializer=test__task__pb2.ConvertAndSaveResponse.FromString,
                )


class ConverterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ConvertAndSave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConverterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConvertAndSave': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertAndSave,
                    request_deserializer=test__task__pb2.ConvertAndSaveRequest.FromString,
                    response_serializer=test__task__pb2.ConvertAndSaveResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'task.Converter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Converter(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ConvertAndSave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/task.Converter/ConvertAndSave',
            test__task__pb2.ConvertAndSaveRequest.SerializeToString,
            test__task__pb2.ConvertAndSaveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class StorerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SaveOrderBook = channel.unary_unary(
                '/task.Storer/SaveOrderBook',
                request_serializer=test__task__pb2.SaveOrderBookRequest.SerializeToString,
                response_deserializer=test__task__pb2.SaveOrderBookResponse.FromString,
                )
        self.SaveFairPrice = channel.unary_unary(
                '/task.Storer/SaveFairPrice',
                request_serializer=test__task__pb2.SaveFairPriceRequest.SerializeToString,
                response_deserializer=test__task__pb2.SaveFairPriceResponse.FromString,
                )


class StorerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SaveOrderBook(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveFairPrice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StorerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SaveOrderBook': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveOrderBook,
                    request_deserializer=test__task__pb2.SaveOrderBookRequest.FromString,
                    response_serializer=test__task__pb2.SaveOrderBookResponse.SerializeToString,
            ),
            'SaveFairPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveFairPrice,
                    request_deserializer=test__task__pb2.SaveFairPriceRequest.FromString,
                    response_serializer=test__task__pb2.SaveFairPriceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'task.Storer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Storer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SaveOrderBook(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/task.Storer/SaveOrderBook',
            test__task__pb2.SaveOrderBookRequest.SerializeToString,
            test__task__pb2.SaveOrderBookResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveFairPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/task.Storer/SaveFairPrice',
            test__task__pb2.SaveFairPriceRequest.SerializeToString,
            test__task__pb2.SaveFairPriceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
